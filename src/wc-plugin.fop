
WordpressPlugin<"woocommerce-supplyXhain", "Woocommerce SupplyXhain Integration", "https://launix.de/launix/supplyxhain-supply-chain-neu-gedacht-das-rest-basierte-einkaufsmanagement/", "Launix, Inh. Carl-Philip HÃ¤nsch", "https://launix.de/launix/", "Integrate SupplyXhain Endpoints into your WC Shop", "0.1">.
WordpressSetting<"woocommerce-supplyXhain", "apiurl", "SupplyXhain API Endpunkt">.
WordpressSetting<"woocommerce-supplyXhain", "pricefactor", "Preisfaktor (Default: 1)">.
WordpressSetting<"woocommerce-supplyXhain", "catalogparams", "Katalog-Parameter (z.B.: categories=1-3,6)">.
WordpressSetting<"woocommerce-supplyXhain", "token", "Auth-Token">.

WordpressSettingBeforeHTML<"woocommerce-supplyXhain", "
	<a href=\"<?php echo esc_attr(get_site_url(null, 'wp-admin/options-general.php?page=woocommerce-supplyXhain_sync')); ?>\">Test-Sync</a><br>
	Cron Sync URL: <input type=\"text\" readonly value=\"<?php echo esc_attr(get_site_url(null, 'wp-json/sx/sync')); ?>\"> (please call it whenever you need)">.
WordpressAdminMenu<"woocommerce-supplyXhain", "sync", "Woocommerce-SupplyXhaini Sync-Test", "
	?>
	<div class='wrap'>
	<h1>Woocommerce SupplyXhain Sync</h1>
	<div>
		<?php
			\$apiurl = get_option('woocommerce-supplyXhain:apiurl');
			\$api = wp_remote_get(\$apiurl);
			if (is_wp_error(\$api)) {
				echo 'Fehler! API Endpunkt konnte nicht geladen werden';
			}
			\$api = json_decode(wp_remote_retrieve_body(\$api), true);
			echo 'API Vendor: ' . esc_html(\$api['vendor']) . '<br>';
			fop_wc_sx_sync(\$api, function (\$msg) {
				echo '<pre>' . esc_html(\$msg) . '</pre>';
			});
		?>
	</div>	
	<?php
">.

Snippet<"wordpress/plugin/woocommerce-supplyXhain", "syncer", "
	add_action('rest_api_init', function () {
			  register_rest_route('sx', 'sync', ['methods' => 'GET', 'callback' => 'fop_wc_sx_sync']);
	});
	add_action('woocommerce_payment_complete', function() {
		// sync all orders after every payment
		fop_wc_sx_sync_order();
	}, 10, 3);

	function fop_wc_sx_sync(\$api = null, \$log = null) {
		global \$wpdb;
		set_time_limit(0);
		/* inside admin */
		require_once(ABSPATH . 'wp-admin/includes/media.php');
		require_once(ABSPATH . 'wp-admin/includes/file.php');
		require_once(ABSPATH . 'wp-admin/includes/image.php');

		\$pricefactor = doubleval(json_decode(str_replace(',', '.', get_option('woocommerce-supplyXhain:pricefactor')))) ?: 1;

		if (!\$api || \$api instanceof WP_REST_Request) \$api = get_option('woocommerce-supplyXhain:apiurl');
		if (is_string(\$api)) {
			\$api = wp_remote_get(\$api);
			if (is_wp_error(\$api)) return false;
			\$api = json_decode(wp_remote_retrieve_body(\$api), true);
		}

		if (!\$log) \$log = function (\$msg) {};

		// i18n
		\$languages = ['de_DE', 'de', 'en_US', 'en']; // TODO: einstellbar

		\$i18n = function (\$x) use (\$languages) {
			if (is_string(\$x)) return \$x;
			foreach (\$languages AS \$ln) {
				if (isset(\$x[\$ln])) return \$x[\$ln];
			}
			return 'untranslated';
		};

		\$wpdb->query('START TRANSACTION');
		\$category_map = [];
		\$wp_cat_parent = [];
		foreach (\$api['categories'] AS \$catid => \$cat) {
			\$catname = \$i18n(\$cat['name']);
			\$term_ids = \$wpdb->get_results('SELECT term_id FROM `'.\$wpdb->prefix.'termmeta` WHERE meta_key = \\'sx_id\\' AND meta_value = ' . esc_sql(\$catid));
			if (count(\$term_ids)) {
				// found by sx_id
				\$category_map[\$catid] = \$term_ids[0]->term_id;
				\$term = get_term(\$term_ids[0]->term_id, 'product_cat'); // update title ->name, ->parent
				if (\$term->name != \$catname) {
					// update name
					wp_update_term(\$term->term_id, 'product_cat', ['name' => \$catname]);
				}
				/* remove parent if cat has no parent */
				if (\$term->parent && !isset(\$cat['parent'])) {
					wp_update_term(\$term->term_id, 'product_cat', ['parent' => 0]);
				} else if (\$term->parent) {
					/* remember parent so we dont have to trigger an sql update later */
					\$wp_cat_parent[\$term->term_id] = \$term->parent;
				}
			} else {
				\$term = get_term_by('name', \$catname, 'product_cat');
				if (\$term) {
					// found by name: update sx_id
					\$category_map[\$catid] = \$term->term_id;
					update_term_meta(\$term->term_id, 'sx_id', \$catid);
					\$log(\"Claimed category \$catid = \$catname\");
				} else {
					// not found: create
					\$term = wp_insert_term(\$catname, 'product_cat');
					\$category_map[\$catid] = \$term['term_id'];
					update_term_meta(\$term['term_id'], 'sx_id', \$catid);
					\$log(\"Created category \$catid = \$catname\");
				}
			}
		}
		/* update categorie-parents */
		foreach (\$api['categories'] AS \$catid => \$cat) {
			if (isset(\$cat['parent']) && (!isset(\$wp_cat_parent[\$category_map[\$catid]]) || \$wp_cat_parent[\$category_map[\$catid]] != \$category_map[\$cat['parent']])) {
					wp_update_term(\$category_map[\$catid], 'product_cat', ['parent' => \$category_map[\$cat['parent']]]);
			}
		}
		\$wpdb->query('COMMIT');
		\$log('Category mapping: ' . json_encode(\$category_map));

		\$store = new WC_Data_Store('product');
		\$article_map = [];
		\$page = 0;
		while (true) {
			\$catalog = json_decode(wp_remote_retrieve_body(wp_remote_get(\$api['catalog_url'] . '?page=' . \$page . '&' . get_option('woocommerce-supplyXhain:catalogparams'))), true);
			if (!\$catalog) break;

			\$log('Loading '.count(\$catalog['items']) . ' articles');
			\$wpdb->query('START TRANSACTION');
			foreach (\$catalog['items'] AS \$item) {
				\$posts = get_posts(['post_type' => 'product', 'meta_query' => [['key' => 'sx_id', 'value' => \$item['id']]]]);
				if (!count(\$posts)) {
					// create
					\$product = new WC_Product_Simple();
					\$store->create(\$product);
					update_post_meta(\$product->get_id(), 'sx_id', \$item['id']);
				} else {
					\$product = new WC_Product_Simple(\$posts[0]);
				}
				\$article_map[\$item['id']] = \$product->get_id();

				// update \$product attributes
				\$product->set_name(\$i18n(\$item['name']));
				\$product->set_category_ids(array_map(function (\$x) use (\$category_map) {return \$category_map[\$x];}, \$item['categories']));
				\$product->set_description(wp_filter_post_kses(\$i18n(\$item['detailsHTML'])));
				if (isset(\$item['price'])) { // price
					\$product->set_regular_price(\$item['price'] * \$pricefactor);
				}
				\$piclist = [];
				foreach (\$item['pictures'] AS \$picture) {
					// url, thumbnailURL, title
					\$picposts = get_posts(['post_type' => 'attachment', 'meta_query' => [['key' => 'orig_url', 'value' => \$picture['url']]]]);
					if (count(\$picposts)) {
						\$picid = \$picposts[0]->ID;
						if (\$picposts[0]->post_title != \$i18n(\$picture['title'])) {
							wp_update_post(['ID' => \$picposts[0]->ID, 'post_title' => \$i18n(\$picture['title'])]);
						}
						array_push(\$piclist, \$picid);
					} else {
						\$log('Inserting Media ' . \$picture['url']);
						\$picid = media_sideload_image(\$picture['url'].'.png', \$product->get_id(), \$i18n(\$picture['title']), 'id');
						update_post_meta(\$picid, 'orig_url', \$picture['url']);
						array_push(\$piclist, \$picid);
					}
				}
				if (count(\$piclist)) \$product->set_image_id(array_shift(\$piclist));
				\$product->set_gallery_image_ids(\$piclist);
				\$product->save();

				// ensure state publish
				if (\$product->status != 'publish') {
					wp_publish_post(\$product->get_id());
				}
			}
			\$wpdb->query('COMMIT');
			\$log('Loaded '.count(\$catalog['items']) . ' articles');

			if (!count(\$catalog['items']) || count(\$catalog['items']) < \$catalog['limit']) break; // fertig
			\$page = \$catalog['page'] + 1;
		}

		\$wpdb->query('START TRANSACTION');
		// unpublish products with sx_id that are not in article_map
		\$posts = \$wpdb->get_results('SELECT post_id FROM `'.\$wpdb->prefix.'postmeta` WHERE meta_key = \\'sx_id\\' AND NOT meta_value IN (' . implode(',',array_keys(\$article_map)) . ') AND post_id IN (SELECT ID FROM `'.\$wpdb->prefix.'posts` WHERE post_type = \\'product\\' AND post_status = \\'publish\\')');
		foreach (\$posts AS \$post) {
			\$log('disable '.\$post->post_id);
			wp_update_post(['ID' => \$post->post_id, 'post_status' => 'trash']);
		}
		\$wpdb->query('COMMIT');
		fop_wc_sx_sync_order(\$api, \$log);
		\$log('Import done');
	}

	function fop_wc_sx_sync_order(\$api = null, \$log = null) {
		if (!\$api || \$api instanceof WP_REST_Request) \$api = get_option('woocommerce-supplyXhain:apiurl');
		if (is_string(\$api)) {
			\$api = wp_remote_get(\$api);
			if (is_wp_error(\$api)) return false;
			\$api = json_decode(wp_remote_retrieve_body(\$api), true);
		}

		if (!\$log) \$log = function (\$msg) {};

		if (!isset(\$api['order_url'])) return; // API does not allow order sync

		\$token = get_option('woocommerce-supplyXhain:token');
		if (!\$token) {
			return \$log('no token given for order API');
		}

		// check all wp_posts type=shop_order, status = wc-processing who dont have sx-url => POST order data, get sx-url, put it into post_meta
		\$orders = get_posts(['post_type' => 'shop_order', 'post_status' => 'wc-processing']);
		foreach (\$orders AS \$wp_order) {
			\$order_url = get_post_meta(\$wp_order->ID, 'sx-url', true);
			if (!\$order_url) {
				/* submit order to sx endpoint */
				// TODO: build \$order from wc order
				\$wc_order = new WC_Order(\$wp_order->ID);
				\$order = [
					'billing' => [
						'first_name' => \$wc_order->get_billing_first_name(),
						'last_name' => \$wc_order->get_billing_last_name(),
						'company' => \$wc_order->get_billing_company(),
						'address1' => \$wc_order->get_billing_address_1(),
						'address2' => \$wc_order->get_billing_address_2(),
						'city' => \$wc_order->get_billing_city(),
						'state' => \$wc_order->get_billing_state(),
						'postcode' => \$wc_order->get_billing_postcode(),
						'country' => \$wc_order->get_billing_country(),
						'email' => \$wc_order->get_billing_email(),
						'phone' => \$wc_order->get_billing_phone()
					],
					'shipping' => [
						'first_name' => \$wc_order->get_shipping_first_name(),
						'last_name' => \$wc_order->get_shipping_last_name(),
						'company' => \$wc_order->get_shipping_company(),
						'address1' => \$wc_order->get_shipping_address_1(),
						'address2' => \$wc_order->get_shipping_address_2(),
						'city' => \$wc_order->get_shipping_city(),
						'state' => \$wc_order->get_shipping_state(),
						'postcode' => \$wc_order->get_shipping_postcode(),
						'country' => \$wc_order->get_shipping_country()
					],
					'items' => []
				];
				foreach (\$wc_order->get_items(['line_item', 'fee', 'coupon', 'shipping']) AS \$item) {
					\$sx_item = [
						'name' => \$item->get_name(),
						'quantity' => \$item->get_quantity() ?? 1,
						'single_net_price' => round(\$item->get_total() / (\$item->get_quantity() ?? 1), 1),
						'tax_rate' => round(100 * (\$item->get_total_tax() / \$item->get_total()))
					];
					if (\$item instanceof WC_Order_Item_Product) {
						\$product = \$item->get_product_id();
						if (\$product) {
							\$product = get_post_meta(\$product, 'sx_id', true);
						}
						\$sx_item['product'] = \$product; // sx_id of product
					}
					array_push(\$order['items'], \$sx_item);
				}

				\$order_url = wp_remote_post(\$api['order_url'], ['headers' => ['Authorization' => 'Bearer ' . \$token, 'Content-Type' => 'application/json'], 'body' => json_encode(\$order)]);
				if (is_wp_error(\$order_url)) {
					\$log('failed to submit order to API');
					continue;
				} else {
					// retrieve Order URL
					\$order_url = wp_remote_retrieve_body(\$order_url);
					if (\$order_url[0] == '{') {
						// json: {\"error\": \"accessdenied\"}
						\$order_url = json_decode(\$order_url, true);
						if (isset(\$order_url['error'])) {
							\$log(\$order_url['error']); // error
						}
						continue; // expect URL to be string, not json
					}
					\$log('submitted order: ' . \$order_url);
					/* TODO: activate once it works; persisting is deactivated for dev testing */
					// update_post_meta(\$wp_order->ID, 'sx-url', \$order_url);
				}
			}
		}

		/* retrieve current order object and update status */
		\$order_data = wp_remote_get(\$order_url, ['headers' => ['Authorization' => 'Bearer ' . \$token, 'Content-Type' => 'application/json']]);
		if (is_wp_error(\$order_url)) {
			\$log('failed to retrieve order data from API: ' . \$order_url);
		} else if (!(\$order_data = json_decode(wp_remote_retrieve_body(\$sx_order), true))) {
			\$log('failed to retrieve order data from API: ' . \$order_url);
		} else {
			\$log('TODO: ' . json_encode(\$order_data));
		}
	}
">.
